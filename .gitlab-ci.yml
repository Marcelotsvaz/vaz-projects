#
# VAZ Projects
#
#
# Author: Marcelo Tellier Sartori Vaz <marcelotsvaz@gmail.com>



stages:
    - build
    - test
    - deploy
    # - upload


variables:
    PIP_CACHE_DIR: ${CI_PROJECT_DIR}/.cache/pip
    applicationImage: ${CI_REGISTRY_IMAGE}/application:latest # ${CI_COMMIT_SHORT_SHA}
    composeConfig: '-f docker-compose.yml -f docker-compose.local.yml'



# 
# Jobs.
#-----------------------------------------------------------------------------------------------------------------------
build-docker-image:
    stage: build
    
    environment:
        name: staging
        action: prepare
    
    services:
        - docker:20.10.12-dind
    
    image: docker:20.10.12
    
    script:
        - docker login --username ${CI_REGISTRY_USER} --password ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
        - docker build --pull --tag ${applicationImage} application
        - docker push ${applicationImage}


unit-tests:
    stage: test
    
    environment:
        name: staging
        action: prepare
    
    services:
        - docker:20.10.12-dind
    
    image: docker/compose:alpine-1.29.2
    
    script:
        - docker login --username ${CI_REGISTRY_USER} --password ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
        - mkdir deployment; cp ${DJANGO_SECRETS_FILE} deployment/secrets.py; touch deployment/environment.sh
        - docker-compose ${composeConfig} up --detach
        - docker-compose ${composeConfig} exec --no-TTY application curl --silent --retry 300 --retry-connrefused --retry-delay 1 elasticsearch:9200/_cluster/health/
        - docker-compose ${composeConfig} exec --no-TTY application coverage run manage.py test
        - docker-compose ${composeConfig} exec --no-TTY application coverage report
        - docker-compose ${composeConfig} exec --no-TTY application coverage xml
    
    artifacts:
        reports:
            cobertura: deployment/coverage.xml


deployEnvironment:
    stage: deploy
    
    environment:
        name: staging
        action: start
        on_stop: destroyEnvironment
    
    image:
        name: hashicorp/terraform:1.1.4
        entrypoint: [ '' ]
    
    cache:
        paths:
            - deployment/terraform/
    
    script:
        - apk add --no-cache bash tar jq
        - server/scripts/deploy.sh deployEnvironment ${CI_ENVIRONMENT_TIER}
    
    artifacts:
        paths:
            - deployment/environment.sh


destroyEnvironment:
    stage: deploy
    
    environment:
        name: staging
        action: stop
    
    rules:
        - when: manual
          allow_failure: true
    
    image:
        name: hashicorp/terraform:1.1.4
        entrypoint: [ '' ]
    
    cache:
        paths:
            - deployment/terraform/
    
    script:
        - apk add --no-cache bash jq
        - server/scripts/deploy.sh destroyEnvironment ${CI_ENVIRONMENT_TIER}


# uploadFiles:
#     stage: upload
    
#     environment:
#         name: staging
#         action: prepare
    
#     cache:
#         paths:
#             - .cache/pip/
    
#     script:
#         - apt-get update; apt-get install --yes --no-install-recommends --quiet libmemcached-dev npm awscli
#         - npm install --global less
#         - pip install -r requirements/${CI_ENVIRONMENT_TIER}.txt
#         - mkdir -p deployment; cp ${DJANGO_SECRETS_FILE} deployment/secrets.py
#         - server/scripts/deploy.sh uploadFiles ${CI_ENVIRONMENT_TIER}