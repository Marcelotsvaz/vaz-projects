#
# VAZ Projects
#
#
# Author: Marcelo Tellier Sartori Vaz <marcelotsvaz@gmail.com>



stages:
    - build
    - test
    - deploy
    - upload


variables:
    PIP_CACHE_DIR: ${CI_PROJECT_DIR}/.cache/pip
    repositorySnapshot: ${CI_PROJECT_URL}/-/archive/${CI_COMMIT_SHA}/vaz-projects.tar.gz
    applicationImage: ${CI_REGISTRY_IMAGE}/application:${CI_COMMIT_SHORT_SHA}
    composeImage: ${CI_REGISTRY_IMAGE}/compose:2.2



# 
# Jobs.
#-----------------------------------------------------------------------------------------------------------------------
buildDockerImage:
    stage: build
    
    environment:
        name: staging
        action: prepare
    
    services:
        - docker:20.10-dind
    
    image: ${composeImage}
    
    script:
        - docker login --username ${CI_REGISTRY_USER} --password ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
        - docker build --pull --tag ${applicationImage} --push application


runUnitTests:
    stage: test
    
    environment:
        name: staging
        action: prepare
    
    services:
        - docker:20.10-dind
    
    image: ${composeImage}
    
    script:
        - set -a; source server/scripts/local.sh; set +a
        - echo ${CI_REGISTRY_PASSWORD} | docker login --username ${CI_REGISTRY_USER} --password-stdin ${CI_REGISTRY}
        - docker compose up --detach
        - docker compose exec --no-TTY application coverage run manage.py test
        - docker compose exec --no-TTY application coverage report
        - docker compose exec --no-TTY application coverage xml > coverage.xml
    
    artifacts:
        reports:
            cobertura: coverage.xml


deployEnvironment:
    stage: deploy
    
    environment:
        name: staging
        action: start
        on_stop: destroyEnvironment
    
    image:
        name: hashicorp/terraform:1.1.5
        entrypoint: [ '' ]
    
    cache:
        paths:
            - deployment/terraform/
    
    script:
        - apk add --no-cache bash tar jq
        - server/scripts/deploy.sh deployEnvironment ${CI_ENVIRONMENT_TIER}
    
    artifacts:
        paths:
            - deployment/environment.sh


destroyEnvironment:
    stage: deploy
    
    environment:
        name: staging
        action: stop
    
    rules:
        - when: manual
          allow_failure: true
    
    image:
        name: hashicorp/terraform:1.1.5
        entrypoint: [ '' ]
    
    cache:
        paths:
            - deployment/terraform/
    
    script:
        - apk add --no-cache bash jq
        - server/scripts/deploy.sh destroyEnvironment ${CI_ENVIRONMENT_TIER}


uploadFiles:
    stage: upload
    
    environment:
        name: staging
        action: prepare
    
    services:
        - docker:20.10-dind
    
    image: ${composeImage}
    
    script:
        - set -a; source server/scripts/local.sh; set +a    # Only for djangoSecretKey.
        - set -a; source deployment/environment.sh; set +a  # From deployEnvironment.
        - echo ${CI_REGISTRY_PASSWORD} | docker login --username ${CI_REGISTRY_USER} --password-stdin ${CI_REGISTRY}
        - apk add --no-cache bash # awscli  # TODO: Cloudfront invalidation.
        - docker compose run --no-deps --rm application ./manage.py collectstatic --ignore '*/src/*' --no-input
        # - aws cloudfront create-invalidation --distribution-id ${cloudfrontId} --paths '/*'  