# 
# VAZ Projects
# 
# 
# Author: Marcelo Tellier Sartori Vaz <marcelotsvaz@gmail.com>



stages:
  - build
  - test
  - deploy
  - upload


variables:
    DOCKER_TLS_CERTDIR: /certs/client   # Enable TLS to Docker host. Silence warning in GitLab CI/CD.
    repositorySnapshot: ${CI_PROJECT_URL}/-/archive/${CI_COMMIT_SHA}/vaz-projects.tar.gz
    applicationImage: ${CI_REGISTRY_IMAGE}/application:${CI_COMMIT_SHORT_SHA}
    composeImage: ${CI_REGISTRY_IMAGE}/compose:2.2



# 
# Jobs.
#-----------------------------------------------------------------------------------------------------------------------
buildDockerImage:
    stage: build
    
    environment:
        name: staging
        action: prepare
    
    services: [ docker:20.10-dind ]
    
    image: ${composeImage}
    
    script:
      - echo ${CI_REGISTRY_PASSWORD} | docker login --username ${CI_REGISTRY_USER} --password-stdin ${CI_REGISTRY}
      - docker build --pull --tag ${applicationImage} application
      - docker push --quiet ${applicationImage}


runUnitTests:
    stage: test
    
    environment:
        name: staging
        action: prepare
    
    services: [ docker:20.10-dind ]
    
    image: ${composeImage}
    
    script:
      - echo ${CI_REGISTRY_PASSWORD} | docker login --username ${CI_REGISTRY_USER} --password-stdin ${CI_REGISTRY}
      - docker compose up --no-build --detach --quiet-pull
      - docker compose exec --no-TTY application coverage run manage.py test
      - docker compose exec --no-TTY application coverage report
      - docker compose exec --no-TTY application coverage xml
      - docker compose cp application:/home/django/deployment/tests/unitTests.xml .
      - docker compose cp application:/home/django/deployment/tests/coverage.xml .
    
    coverage: /^TOTAL.+?(\d+(?:\.\d+)?\%)$/
    
    artifacts:
        reports:
            junit: unitTests.xml
            cobertura: coverage.xml


deployEnvironment:
    stage: deploy
    
    environment:
        name: staging
        action: start
        on_stop: destroyEnvironment
    
    image:
        name: hashicorp/terraform:1.1.5
        entrypoint: [ '' ]
    
    cache:
        paths: [ deployment/ ]
    
    script:
      - apk add --no-cache bash tar jq
      - deploy/deploy.sh deployEnvironment ${CI_ENVIRONMENT_TIER}
    
    artifacts:
        paths:
          - deployment/application/environment.env


destroyEnvironment:
    stage: deploy
    
    environment:
        name: staging
        action: stop
    
    rules:
      - when: manual
        allow_failure: true
    
    image:
        name: hashicorp/terraform:1.1.5
        entrypoint: [ '' ]
    
    cache:
        paths: [ deployment/ ]
    
    script:
      - apk add --no-cache bash jq
      - deploy/deploy.sh destroyEnvironment ${CI_ENVIRONMENT_TIER}


uploadFiles:
    stage: upload
    
    environment:
        name: staging
        action: prepare
    
    services: [ docker:20.10-dind ]
    
    image: ${composeImage}
    
    script:
      - echo ${CI_REGISTRY_PASSWORD} | docker login --username ${CI_REGISTRY_USER} --password-stdin ${CI_REGISTRY}
      - docker compose --env-file deployment/application/environment.env pull --quiet application
      - docker compose
            --env-file deployment/application/environment.env
            run
            --no-deps
            --no-TTY
            --quiet-pull
            --rm
            application
            ./manage.py collectstatic --ignore '*/src/*' --no-input
    #   - aws cloudfront create-invalidation --distribution-id ${cloudfrontId} --paths '/*'    # TODO: Cloudfront invalidation.