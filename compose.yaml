# 
# VAZ Projects
# 
# 
# Author: Marcelo Tellier Sartori Vaz <marcelotsvaz@gmail.com>



services:
    application:
        extends:
            service: application
            file: &applicationFile application/compose.yaml
        
        image: ${applicationImage:-vaz-projects/application:development}
        build: application/
        
        depends_on:
            postgres:
                condition: service_healthy
            minio:
                condition: service_healthy
            set-bucket-access:
                condition: service_completed_successfully
        
        environment:
            DJANGO_SETTINGS_MODULE: ${DJANGO_SETTINGS_MODULE:-settings.local}
            domain: &domain ${domain:-localhost}
            staticFilesUrl: &staticFilesUrl ${staticFilesUrl:-https://localhost:9000/local/}
            s3Endpoint: &s3Endpoint ${s3Endpoint:-https://minio:9000}
            bucket: &bucket ${bucket:-local}
            # Secrets.
            djangoSecretKey: django
            POSTGRES_PASSWORD: &postgresPassword postgres
            ELASTIC_PASSWORD: &elasticsearchPassword elastic
            AWS_ACCESS_KEY_ID: &AWS_ACCESS_KEY_ID ${AWS_ACCESS_KEY_ID:-minioadmin}
            AWS_SECRET_ACCESS_KEY: &AWS_SECRET_ACCESS_KEY ${AWS_SECRET_ACCESS_KEY:-minioadmin}
        
        secrets:
          - source: rootCertificates
            target: /etc/ssl/certs/ca-certificates.crt
        
        command:
          - |-
            manage.py migrate --no-input
            manage.py collectstatic --ignore '*/src/*' --no-input
            manage.py search_index --rebuild -f
            manage.py runserver 0.0.0.0:8000 --nostatic
    
    
    memcached:
        extends:
            service: memcached
            file: *applicationFile
    
    
    elasticsearch:
        extends:
            service: elasticsearch
            file: *applicationFile
        
        environment:
            # Secrets.
            ELASTIC_PASSWORD: *elasticsearchPassword
    
    
    postgres:
        extends:
            service: postgres
            file: database/compose.yaml
        
        environment:
            # Secrets.
            POSTGRES_PASSWORD: *postgresPassword
    
    
    traefik:
        extends:
            service: traefik
            file: loadBalancer/compose.yaml
        
        environment:
            domain: *domain
            staticFilesUrl: *staticFilesUrl
            monitoringDomain: ${monitoringDomain:-monitoring.localhost}
    
    
    minio:
        image: minio/minio:RELEASE.2022-07-06T20-29-49Z
        
        restart: unless-stopped
        
        environment:
            MINIO_SERVER_URL: https://minio:9000
        
        secrets:
          - source: certificate
            target: /root/.minio/certs/public.crt
          - source: certificateKey
            target: /root/.minio/certs/private.key
        
        volumes: [ media:/data ]
        
        command: server /data --console-address :9001
        
        ports:
          - 9000:9000   # API.
          - 9001:9001   # Console.
        
        healthcheck:
            test: curl --insecure --silent https://minio:9000/minio/health/live
            interval: 5s
            start_period: 5s
    
    
    set-bucket-access:
        image: minio/mc:RELEASE.2022-07-06T14-54-36Z
        
        depends_on:
            minio:
                condition: service_healthy
        
        environment:
            s3Endpoint: *s3Endpoint
            bucket: *bucket
            # Secrets.
            AWS_ACCESS_KEY_ID: *AWS_ACCESS_KEY_ID
            AWS_SECRET_ACCESS_KEY: *AWS_SECRET_ACCESS_KEY
        
        configs:
          - source: stagingMediaFixture
            target: /stagingMedia/
        
        secrets:
          - source: certificate
            target: /root/.mc/certs/CAs/minio.crt
        
        entrypoint: [ /bin/sh, -ec ]
        command:
          - |-
            mc alias set minio $${s3Endpoint} $${AWS_ACCESS_KEY_ID} $${AWS_SECRET_ACCESS_KEY}
            mc stat minio/$${bucket} &> /dev/null && exit    # Run only on empty volume.
            mc mb $${_}
            mc mirror /stagingMedia/ $${_}
            mc anonymous set download $${_}



configs:
    elasticsearch:
        file: ./application/config/jvm.options
    traefikStatic:
        file: ./loadBalancer/config/traefik/static.yaml
    traefikDynamic:
        file: ./loadBalancer/config/traefik/dynamic.yaml
    stagingMediaFixture:
        file: ./application/stagingMedia/
    stagingDatabaseFixture:
        file: ./database/scripts/stagingFixture.sql



secrets:
    rootCertificates:
        file: /etc/ssl/certs/ca-certificates.crt
    certificate:
        file: ./deployment/tls/website.crt
    certificateKey:
        file: ./deployment/tls/websiteKey.pem



volumes:
    media:
    postgres: